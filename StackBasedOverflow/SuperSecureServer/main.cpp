/*
 * main.cpp
 *
 *  Created on: Feb 13, 2012
 *      Author: Moloch
 */

#include <boost/asio.hpp>
#include <exception>
#include <iostream>
#include <cstring>
#include <string>
#include <map>

using boost::asio::ip::tcp;

static const int BUFFER_SIZE = 1024;
static const int LISTEN_PORT = 1337;
bool authenticate(tcp::iostream& tcpStream);
void mainMenu(tcp::iostream& tcpStream, std::map<std::string, std::string>& notes);

int main(int argc, char* argv[]) {
	std::cout << "[*] Server starting up on port " << LISTEN_PORT << " ... ";
	std::map<std::string, std::string> notes;
	try {
		boost::asio::io_service io_service;
		tcp::endpoint endpoint(tcp::v4(), LISTEN_PORT);
		tcp::acceptor acceptor(io_service, endpoint);
		std::cout << "okay" << std::endl;
		while (true) {
			std::cout << "[*] Waiting for a client to connect ... ";
			std::cout.flush();
			tcp::iostream tcpStream;
			acceptor.accept(*tcpStream.rdbuf());
			std::cout << "okay" << std::endl;
			if (authenticate(tcpStream)) {
				tcpStream << "[*] User successfully authenticated!" << std::endl;
				std::cout << "[*] User successfully authenticated" << std::endl;
				mainMenu(tcpStream, notes);
			} else {
				tcpStream << "[!] Failed login attempt" << std::endl;
				std::cout << "[!] Failed login attempt" << std::endl;
			}
		}
	} catch (std::exception& error) {
		std::cout << "[!] Error: " << error.what() << std::endl;
	}
	return 0;
}

void takeNotes(tcp::iostream& tcpStream, std::map<std::string, std::string>& notes) {
	char noteName[BUFFER_SIZE], noteContent[(BUFFER_SIZE * 4)];
	tcpStream << "Note name: ";
	tcpStream.getline(noteName, BUFFER_SIZE);
	tcpStream << "Note contents:\n";
	tcpStream.getline(noteContent, BUFFER_SIZE);
	tcpStream << "Saving notes ... ";
	tcpStream.flush();
	notes[noteName] = noteContent;
	tcpStream << "okay" << std::endl;
}

void viewNotes(tcp::iostream& tcpStream, std::map<std::string, std::string>& notes) {
	int selection;
	int index = 1;
	if (notes.begin() != notes.end()) {
		tcpStream << "\n *** Existing Notes ***\n";
		std::map<std::string, std::string>::iterator itr;
		for (itr = notes.begin(); itr != notes.end(); ++itr) {
			tcpStream << "   " << index << ". " << (*itr).first << std::endl;
			index++;
		}
		tcpStream << " Select > ";
		tcpStream.flush();
		tcpStream >> selection;
		index = 1;
		for (itr = notes.begin(); itr != notes.end(); ++itr) {
			if (index == selection) {
				tcpStream << "Note contents:\n" << (*itr).second << std::endl;
				break;
			}
			index++;
		}
		/* Drop crlf */
		tcpStream.ignore();
	} else {
		tcpStream << "\n *** No notes exist yet *** " << std::endl;
	}
}

void mainMenu(tcp::iostream& tcpStream, std::map<std::string, std::string>& notes) {
	char selection[BUFFER_SIZE];
	while (! strncmp("3", selection, 1) == 0){
		tcpStream << "\n *** Main Menu ***\n";
		tcpStream << "   1. Create Note\n";
		tcpStream << "   2. View Notes\n";
		tcpStream << "   3. Exit\n";
		tcpStream << " Select > ";
		tcpStream.flush();
		tcpStream.getline(selection, BUFFER_SIZE);
		if (strncmp("1", selection, 1) == 0) {
			takeNotes(tcpStream, notes);
		} else if (strncmp("2", selection, 1) == 0) {
			viewNotes(tcpStream, notes);
		}
	}
}

void alert(char* user, char* pass) {
	char alert[BUFFER_SIZE];
	sprintf(alert, "[*] %s is attempting to authenticated with %s", user, pass);
	std::cout << alert << std::endl;
}

bool authenticate(tcp::iostream& tcpStream) {
	char user[BUFFER_SIZE], pass[BUFFER_SIZE];
	tcpStream << " *** Welcome to Super Secure Note Server ***\nUsername: ";
	tcpStream.getline(user, BUFFER_SIZE);
	tcpStream << "Password: ";
	tcpStream.getline(pass, BUFFER_SIZE);
	alert(user, pass);
	return (strncmp("johnson", user, BUFFER_SIZE) == 0) && (strncmp("hunter2", pass, BUFFER_SIZE) == 0) ? true:false;
}
