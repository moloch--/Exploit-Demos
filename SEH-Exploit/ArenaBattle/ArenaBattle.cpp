/***
 * ArenaBattle.cpp
 *
 *  Created on: Nov 30, 2010
 */

#include "ArenaBattle.h"

ArenaBattle::ArenaBattle()
{
	mainMenu.push_back("Go on an Adventure");
	mainMenu.push_back("Visit the Shop");
	mainMenu.push_back("View Your Stats");
	mainMenu.push_back("Exit the Game");
}

ArenaBattle::~ArenaBattle()
{
	/* Blank */
}

void ArenaBattle::start()
{
	std::cout << INFO << "Server starting up on port " << LISTEN_PORT << " ... ";
	std::cout.flush();
	try {
		boost::asio::io_service io_service;
		tcp::endpoint endpoint(tcp::v4(), LISTEN_PORT);
		tcp::acceptor acceptor(io_service, endpoint);
		std::cout << "okay" <<std::endl;
		while (true) {
			std::cout << INFO << "Waiting for player to connect ... ";
			std::cout.flush();
			tcpStream = new tcp::iostream;
			UserInterface display(tcpStream);
			acceptor.accept(*tcpStream->rdbuf());
			std::cout << "okay" << std::endl;
			(*tcpStream) << "    *** Welcome to the \"Mad Libs\" Arena Battler ***" << std::endl;
			(*tcpStream) << " - Where Your Adventure is " << display.getSlogan() << " -" << std::endl;
			createHuman(display);
			display.introduction(human);
			currentLevel = 1;
			playing = true;
			while (playing && currentLevel <= 10)
			{
				option = display.menu("Home", mainMenu);
				if (option == 1)
				{
					std::cout << INFO << human.getName() << " has started level " << currentLevel << std::endl;
					Level level(&display, currentLevel++);
					level.battle(human);
					if (!human.isDead() && currentLevel < 10) {
						human.increaseHealthBy(10);
						(*tcpStream) << human.getName() << " rests and restores his health to " << human.getHealth() << ".\n" << std::endl;
					}
				}
				else if (option == 2)
				{
					Shop shop(&display);
					shop.browse(human);
				}
				else if (option == 3)
				{
					display.showAttributes(human);
					display.showAttributes(human.getWeapon());
					display.showAttributes(human.getArmor());
				}
				else if (option == 4)
				{
					display.ask("\n[?] Are you sure you want to quit the game? [y/n]: ");
					if (strncmp("y", display.getInputBuffer(), 1) == 0 || strncmp("Y", display.getInputBuffer(), 1) == 0) {
						playing = false;
					}
				}
				if (human.isDead())
				{
					playing = false;
				}
			}
			if (currentLevel == 11 && !human.isDead()) {
				(*tcpStream) << "\n  *** You defeated the dragon and saved the princess, huzzah ***" << std::endl;
			}
			(*tcpStream) << "\n" << INFO << "Thanks for playing the Medieval Mad Lib Battler\n";
			tcpStream->close();
			delete tcpStream;
			std::cout << INFO << "Player disconnected from server" << std::endl;
		}
	}
	catch (char* error)
	{
		std::cout << "\n" << WARN << " Error: " << error << std::endl;
	}
}

void ArenaBattle::createHuman(UserInterface& display)
{
    Weapon largeKnife("Large Knife", 60, 10);
    Armor leather("Leather Armor", 10);
    human.setGold(STARTING_GOLD);
    human.setPotionCount(STARTING_POTIONS);
    human.setWeapon(largeKnife);
    human.setArmor(leather);
    display.ask("What is thy name? ");
    getPlayerName(display.getInputBuffer());
    std::cout << INFO << human.getName() << " is ready for adventure! " << std::endl;
}

void ArenaBattle::getPlayerName(char* nameBuffer)
{
	try {
		char playerName[NAME_BUFFER_SIZE];
		strcpy(playerName, nameBuffer);
		if (strlen(playerName) < NAME_BUFFER_SIZE)
		{
			human.setName(playerName);
		}
		else
		{
			throw "\n[!] Name too long, disconnecting\n";
		}
	} catch (char* error) {
		(*tcpStream) << error << std::endl;
		// throw "Dropping connection, invalid hero name";
	}
}
