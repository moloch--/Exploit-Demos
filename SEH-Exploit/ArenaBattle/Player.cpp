/***
 * Player.cpp
 *
 *  Created on: Nov 30, 2010
 */

#include "Player.h"

Player::Player()
{
	srand(time(NULL));
}

Player::~Player()
{
	// Auto-generated
}

/* NAME */
void Player::setName(string name)
{
	this->name = name;
}

string Player::getName()
{
	return name;
}

/* HEALTH */
void Player::setHealth(int health)
{
	this->health = health;
}

int Player::getHealth()
{
	return health;
}

void Player::decreaseHealthBy(int damage)
{
	health -= damage;
}

void Player::increaseHealthBy(int restore)
{
	health += restore;
}

bool Player::isDead()
{
	return(health > 0 ? false:true);
}

/* ARMOR */
void Player::setArmor(Armor armor)
{
	this->armor = armor;
}

Armor Player::getArmor()
{
	return armor;
}

int Player::getArmorRating()
{
	return armor.getRating();
}

/* WEAPON */
void Player::setWeapon(Weapon weapon)
{
	this->weapon = weapon;
}

Weapon Player::getWeapon()
{
	return weapon;
}

int Player::getDamage()
{
	return weapon.getDamage();
}

int Player::getAttackRating()
{
	return weapon.getRating();
}

/* ATTACKS */
bool Player::standardAttack(Player& target)
{
	range = getAttackRating() - target.getArmorRating();
	attackSuccess = calculateAction(range);
	if (attackSuccess)
	{
		target.decreaseHealthBy(getDamage());
	}
	return attackSuccess;
}

bool Player::advancedAttack(Player& target)
{
	range = getAttackRating() - target.getArmorRating();
	attackSuccess = calculateAction(range);
	if (attackSuccess)
	{
		target.decreaseHealthBy((getDamage() / 2));
	}
	return attackSuccess;
}

/* Yes, there are no floats */
bool Player::calculateAction(int range)
{
	if (range < 5)
	{
		range = 5;
	}
	if (range > 95)
	{
		range = 95;
	}
	roll = rand() % 100 + 1;
	return roll <= range ? true:false;
}
