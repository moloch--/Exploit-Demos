/***
 * UserInterface.cpp
 *
 *  Created on: Dec 9, 2010
 */
#include <iostream>
#include <sstream>
#include "UserInterface.h"

UserInterface::UserInterface(tcp::iostream* tcpStream)
{
	this->tcpStream = tcpStream;
	lineLength = 35;
	inputBuffer = new char[BUFFER_SIZE];
}

UserInterface::~UserInterface()
{
	// Auto-generated
}

char* UserInterface::getInputBuffer() {
	return inputBuffer;
}

void UserInterface::showAttributes(Enemy player)
{
    showHeader("Enemy", player.getName());
    (*tcpStream) << "| Health: " << player.getHealth() << std::endl;
    showFooter();
}

void UserInterface::showAttributes(Human player)
{
    showHeader("Human", player.getName());
    (*tcpStream) << "|  Health: " << player.getHealth() << std::endl;
    (*tcpStream) << "| Potions: " << player.getPotionCount() << std::endl;
    (*tcpStream) << "|    Gold: " << player.getGold() << std::endl;
}

void UserInterface::showAttributes(Weapon weapon)
{
    showHeader("Weapon", weapon.getName());
    (*tcpStream) << "|   Attack: " << weapon.getRating() << "%" << std::endl;
    (*tcpStream) << "|   Damage: " << weapon.getDamage() << std::endl;
}

void UserInterface::showAttributes(Armor armor)
{
	showHeader("Armor", armor.getName());
	(*tcpStream) << "| Defense: " << armor.getRating() << "%" << std::endl;
}

int UserInterface::menu(string name, vector <string> options)
{
	while(true)
	{
		showHeader("Menu", name);
		for (unsigned int index = 0; index < options.size(); ++index)
		{
			(*tcpStream) << "| " << index + 1 << ". " << options.at(index) << std::endl;
		}
		ask("+---=[Please select an option: ");
		optionIndex = toInteger(inputBuffer);
		if (optionIndex <= options.size())
		{
			return (int) optionIndex;
		}
		(*tcpStream) << "[!] Not a valid option, try again." << std::endl;
	}
	return -1;
}

void UserInterface::ask(string prompt)
{
	(*tcpStream) << prompt;
	tcpStream->getline(inputBuffer, BUFFER_SIZE);
}

void UserInterface::text(string text)
{
	(*tcpStream) << text;
	tcpStream->flush();
}

void UserInterface::text(int text)
{
	(*tcpStream) << text;
	tcpStream->flush();
}

int UserInterface::toInteger(string input)
{
	std::stringstream stringToInt(input);
	stringToInt >> optionIndex;
	return optionIndex;
}

void UserInterface::showFooter()
{
	(*tcpStream) << "+";
	for (unsigned int index = 0; index < lineLength - 1; ++index)
	{
		(*tcpStream) << "-";
	}
	(*tcpStream) << ">" << std::endl;
}

/* Catagory and name are dynamic lengths */
void UserInterface::showHeader(string catagory, string name)
{
	std::ostringstream header;
	header << "+---=[" << catagory << ": " << name << "]=-";
	while (header.str().length() < lineLength)
	{
		header << "-";
	}
	(*tcpStream) << header.str() << ">" << std::endl;
}

string UserInterface::getSlogan()
{
	return words.getSlogan();
}

void UserInterface::introduction(Human human)
{
	(*tcpStream) << "\nA hero named " << human.getName();
	(*tcpStream) << " was born in a(n) " << words.getLocation() << " but longed for adventure";
	pause();
}

void UserInterface::adventure(Human human, vector <Enemy> enemies)
{
	(*tcpStream) << "\n" << human.getName() << " " << words.getMovement() << "s off on his adventure";
	(*tcpStream) << " until he came upon a(n) " << words.getLocation();
	(*tcpStream) << ", all of a sudden ";
	for (unsigned int index = 0; index < enemies.size(); ++index)
	{
		(*tcpStream) << enemies[index].getName() << ", ";
	}
	(*tcpStream) << "appeared";
	tcpStream->flush();
	pause();
}

void UserInterface::attack(Player attacker, Player vicitm)
{
	(*tcpStream) << attacker.getName() << " " << words.getAdVerb() << " attacks ";
	(*tcpStream) << vicitm.getName() << " with his " << attacker.getWeapon().getName();
	(*tcpStream) << " for " << attacker.getDamage() << " damage";
	pause();
}

void UserInterface::hit(Player attacker, Player victim)
{
	(*tcpStream) << attacker.getName() << " hits " << victim.getName() << ".  ";
	(*tcpStream) << victim.getName() << " is now down to " << victim.getHealth() << " health";
	pause();
}

void UserInterface::miss(Player attacker, Player victim)
{
	(*tcpStream) << victim.getName() << " " << words.getAdVerb() << " blocks ";
	(*tcpStream) << attacker.getName() << "'s attack with his " << victim.getArmor().getName();
	pause();
}

void UserInterface::kill(Player attacker, Player victim)
{
	(*tcpStream) << attacker.getName() << " " << words.getAdVerb() << " ";
	(*tcpStream) << words.getFatality() << " " << victim.getName() << " ";
	(*tcpStream) << "and shortly thereafter pillages the corpse for gold";
	pause();
}

void UserInterface::pause()
{
	tcpStream->flush();
    for(int index = 0; index < 3; ++index)
    {
#ifdef __WIN32__
        Sleep(600);
#else
        sleep(1);
#endif
    	(*tcpStream) << ".";
        tcpStream->flush();
    }
    (*tcpStream) << "\n" << std::endl;
}

