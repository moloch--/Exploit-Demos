/***
 * Level.cpp
 *
 *  Created on: Nov 30, 2010
 */

#include "Level.h"

Level::Level(UserInterface* display, int currentLevel)
{
	this->display = display;
	fighting = true;
    createEnemies(currentLevel);
    actionMenu.push_back("Standard Attack");
	actionMenu.push_back("Advanced Attack");
	actionMenu.push_back("Use a Potion");
	actionMenu.push_back("Run Away!");
}

Level::~Level()
{
	// Auto-generated
}

void Level::createEnemies(int currentLevel)
{
	enemies.clear();
	if (currentLevel <= 5)
	{
		enemies = enemyCreator.getEasy(currentLevel);
	}
	else if(5 < currentLevel && currentLevel < 10)
	{
		enemies = enemyCreator.getHard(currentLevel - 5);
	}
	else
	{
		enemies.push_back(enemyCreator.getDragon());
	}
}

void Level::battle(Human & human)
{
	display->adventure(human, enemies);
	do
	{
	    computerTurn(human);
	    if (human.isDead())
	    {
	    	display->kill(enemies[0], human);
	    }
	    else
	    {
	    	humanTurn(human);
	    }
	    if (enemies.size() > 0)
	    {
	    	removeKilled(human);
		}
	}
	while(enemies.size() > 0 && !human.isDead());
}

/* Start at the top of the vector and move down */
void Level::removeKilled(Human& human)
{
	index = enemies.size();
	do
	{
        index--;
        if(enemies[index].isDead())
        {
            display->kill(human, enemies[index]);
            human.increaseGoldBy((enemies[index].getReward() * 2));
            enemies.erase(enemies.begin() + index);
        }
    }
	while(index > 0);
}

void Level::computerTurn(Human& human)
{
    for(unsigned int index = 0; index < enemies.size(); ++index)
    {
    	display->attack(enemies[index], human);
        attackSuccess = enemies[index].standardAttack(human);
        if (attackSuccess)
        {
    		display->hit(enemies[index], human);
    	}
        else
    	{
    		display->miss(enemies[index], human);
    	}
    }
}

void Level::updateTargets()
{
    targets.clear();
    for(unsigned int index = 0;index < enemies.size();++index)
    {
        targets.push_back(enemies[index].getName());
    }
}

void Level::humanTurn(Human& human)
{
	display->showAttributes(human);
	updateTargets();
	option = display->menu("Actions", actionMenu);
	if(option == 1)
	{
	    standard(human);
	}
	else if(option == 2)
	{
	    advanced(human);
	}
	else if(option == 3)
	{
	    potion(human);
	}
	else if(option == 4)
	{
	    run(human);
	}
}

void Level::advanced(Human& human)
{
	count = 0;
    do
    {
        option = display->menu("Target Selection", targets);
        option--; // The user option will be off by one!
        display->attack(human, enemies.at(option));
        turn = human.advancedAttack(enemies.at(option));
        if (turn) // In this context turn indicates attack success
        {
    		display->hit(human, enemies[option]);
    	}
        else
    	{
    		display->miss(human, enemies[option]);
    	}
        count++;
    }
    while(turn && count < 5);
}

void Level::standard(Human& human)
{
    option = display->menu("Target Selection", targets);
    option--; // The user option will be off by one!
    display->attack(human, enemies.at(option));
    attackSuccess = human.standardAttack(enemies.at(option));
    if (attackSuccess)
    {
		display->hit(human, enemies[option]);
	}
    else
	{
		display->miss(human, enemies[option]);
	}
}

void Level::potion(Human& human)
{
    human.usePotion();
    display->text("\n" + human.getName() + " drinks a potion and retores his health to ");
    display->text(human.getHealth());
	for (int index = 0; index < 3; ++index) {
		display->text(".");
#ifdef __WIN32__
		Sleep(600);
#else
                sleep(1);
#endif
	}
    display->text("\n\n");
}

void Level::run(Human& human)
{
	display->text("\n" + human.getName());
	display->text(" attempts to run away, like a coward");
	for (int index = 0; index < 3; ++index) {
		display->text(".");
#ifdef __WIN32__
		Sleep(600);
#else
                sleep(1);
#endif

	}
	display->text("\n\n");
    if(human.runAway())
    {
        enemies.clear();
    }
}
